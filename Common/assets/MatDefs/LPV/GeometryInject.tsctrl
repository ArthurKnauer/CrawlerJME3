layout (vertices = 3) out;

// attributes of the input CPs
in vec3 WorldPos_TCS[];
in vec3 Normal_TCS[];

// attributes of the output CPs
out vec3 WorldPos_TES[];
out vec3 Normal_TES[];

/* Tesselate triangles into "more or less" equilateral triangles of constant size, 
	so that each GV cell that intersects with the polygon receives at least one vertex. */
void main() {
    Normal_TES[gl_InvocationID] = Normal_TCS[gl_InvocationID];
    WorldPos_TES[gl_InvocationID] = WorldPos_TCS[gl_InvocationID];

	// tessellate by edge length (optimal tessellation are equilateral triangles, a point for each cell)
	gl_TessLevelOuter[gl_InvocationID] = 6 * distance(WorldPos_TCS[(gl_InvocationID + 1) % 3], 
		WorldPos_TCS[(gl_InvocationID + 2) % 3]);

	barrier(); // wait for all three invocations to reach this point

	if (gl_InvocationID == 0) { // inner tessellation value is average of the edge values
		gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) / 3.0;
	}
}
layout(triangles, equal_spacing, ccw, point_mode) in;

in vec3 WorldPos_TES[];
in vec3 Normal_TES[];

out vec3 WorldPos_GS;
out vec3 Normal_GS;
out float Area_GS;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) {
   	 return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) {
   	 return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

/* Interpolate tessellated vertices and pass them to the geometry shader. */
void main() {
     // Interpolate the attributes of the output vertex using the barycentric coordinates
   	 Normal_GS = normalize(interpolate3D(Normal_TES[0], Normal_TES[1], Normal_TES[2]));
   	 WorldPos_GS = interpolate3D(WorldPos_TES[0], WorldPos_TES[1], WorldPos_TES[2]);

	 Area_GS = length(cross(WorldPos_TES[1] - WorldPos_TES[0], WorldPos_TES[2] - WorldPos_TES[0]));

   	 gl_Position = vec4(WorldPos_GS, 1.0);
}